plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/nyakomod.accesswidener")

	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			//vmArg "-Dfabric-api.datagen.strict-validation"

			runDir "build/datagen"
		}
	}
}

repositories {
	maven {
		url = uri("https://storage.googleapis.com/devan-maven/")
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	maven { url "https://maven.nucleoid.xyz/" }
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = "https://ladysnake.jfrog.io/artifactory/mods"
	}
	maven {
		url = uri("https://storage.googleapis.com/devan-maven/")
	}
	maven { url 'https://maven.wispforest.io' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation 'me.lucko:fabric-permissions-api:0.1-SNAPSHOT'

	include "net.devtech:Stacc:1.3.3"
	modRuntimeOnly(include("net.devtech:Stacc:1.3.3"))

	modImplementation include("eu.pb4:placeholder-api:2.0.0-beta.5+1.19")

	modImplementation "dev.emi:trinkets:${trinkets_version}"

	modRuntimeOnly(include("com.terraformersmc:modmenu:4.0.6"))

	modImplementation("net.devtech:arrp:0.+")

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	// only if you plan to use owo-config
	annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"

	// include this if you don't want force your users to install owo
	// sentinel will warn them and give the option to download it automatically
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	implementation 'org.json:json:20220320'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
